public class lesson_08_17 {
    //Mutable vs Immutable объекты

    //Когда-то давно мы с вами изучали константы в Java и пришли к не очень утешительному выводу.
    //Константы позволяют защитить переменные от изменений, но не в состоянии защитить от изменений объекты,
    //на которые эти переменные ссылаются.

    //В ответ на эту проблему в Java придумали объекты-константы. Или, как их еще называют, immutable-объекты — неизменяемые объекты.

    //Кстати, вы даже знаете один такой класс, чьи объекты нельзя менять — String.
    //Объект класса String остается неизменным все время после создания. И как же разработчики Java добились этого?
    //Во-первых, все переменные класса String скрыты – объявлены private.

    //Во-вторых, наследоваться от класса String нельзя: он имеет модификатор final в объявлении класса.

    //В-третьих, что самое интересное, все методы класса String, которые по идее должны были менять существующий объект,
    //не меняют его, а возвращают новый.

    //Например, метод toUpperCase() делает все буквы строки большими (заглавными).
    //Но вместо изменения объекта, у которого он вызван, этот метод возвращает новый объект типа String, состоящий из заглавных букв:
    //String text = "Это очень важное сообщение";
    //String message = text.toUpperCase();

}
