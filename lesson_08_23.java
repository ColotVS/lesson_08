public class lesson_08_23 {
    //Наследование подробно

    //Предположим, вам нужно написать очень сложный класс.
    //Писать с нуля долго, потом еще долго все тестировать и искать ошибки.
    //Зачем идти самым сложным путем? Лучше поискать, а нет ли уже такого класса?

    //Предположим, вы нашли класс, который своими методами реализует 80% нужной вам функциональности.

    //Что делать с ним дальше? Вы можете просто скопировать его код в свой класс. Но у такого решения есть несколько минусов:

    //Найденный класс уже может быть скомпилирован в байт-код, а доступа к его исходному коду у вас нет.

    //Исходный код класса есть, но вы работаете в компании,
    //которую могут засудить на пару миллиардов за использование даже 6 строчек чужого кода. А потом она засудит вас.

    //Ненужное дублирование большого объема кода.
    //Кроме того, если автор чужого класса найдет в нем ошибку и исправит ее, у вас эта ошибка останется.

    //Есть решение потоньше, и без необходимости получать легальный доступ к коду оригинального класса.
    //В Java вы можете просто объявить тот класс родителем вашего класса.
    //Это будет эквивалентно тому, что вы добавили код того класса в код своего.
    //В вашем классе появятся все данные и все методы класса-родителя.

    //Наследование можно использовать и для других целей.
    //Допустим, у вас есть десять классов, которые очень похожи, имеют совпадающие данные и методы.
    //Вы можете создать специальный базовый класс, вынести эти данные (и работающие с ними методы) в этот базовый класс и
    //объявить те десять классов его наследниками. Т.е. указать в каждом классе, что у него есть класс-родитель — данный базовый класс.

    //Также как преимущества абстракции раскрываются только рядом с инкапсуляцией,
    //так и преимущества наследования гораздо сильнее при использовании полиморфизма.

    //Это отличный способ упростить код похожих объектов.
    //Особенно много преимуществ мы получаем, когда в проекте тысячи различных объектов и сотни классов.
    //Тогда правильно подобранными родительскими (базовыми) классами можно не только существенно упростить логику,
    //но и сократить код в десятки раз.

    //Наследование класса — extends

    //Чтобы унаследовать один класс от другого, нужно после объявления нашего класса указать ключевое слово extends
    //и написать имя родительского класса. Выглядит это обычно примерно так:
    //class Потомок extends Родитель
    //Именно такую конструкцию нужно написать при объявлении класса Потомок. Наследоваться, кстати, можно только от одного класса.

    //В Java нет множественного наследования: нельзя унаследовать класс от двух классов.
    //У каждого класса может быть только один класс-родитель. Если класс-родитель не указан, таковым считается класс Object.
}
